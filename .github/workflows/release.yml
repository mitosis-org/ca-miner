name: Release

on:
  push:
    tags:
      - "v*"
  workflow_dispatch:
    inputs:
      tag:
        description: "Tag to release"
        required: true
        default: "v0.1.0"

env:
  CARGO_TERM_COLOR: always

jobs:
  create-release:
    name: Create Release
    runs-on: ubuntu-latest
    outputs:
      upload_url: ${{ steps.create_release.outputs.upload_url }}
      release_id: ${{ steps.create_release.outputs.id }}
    steps:
      - name: Checkout sources
        uses: actions/checkout@v4

      - name: Create Release
        id: create_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ github.ref_name || github.event.inputs.tag }}
          release_name: CA Miner ${{ github.ref_name || github.event.inputs.tag }}
          body: |
            ## CA Miner ${{ github.ref_name || github.event.inputs.tag }}

            High-performance Ethereum contract address miner for CREATE2 and CREATE3 patterns.

            ### ðŸš€ Quick Start

            Download the appropriate binary for your platform below and run:

            ```bash
            # CREATE2 mining example
            ./ca-miner create2 \
              0x4e59b44847b379578588920cA78FbF26c0B4956C \
              0x1234567890123456789012345678901234567890123456789012345678901234 \
              dead \
              --max-iterations 1000000
            ```

            ### ðŸ“¦ Installation

            1. Download the binary for your platform from the assets below
            2. Extract the archive: `tar -xzf ca-miner-*.tar.gz` (Linux/macOS) or unzip (Windows)
            3. Make it executable: `chmod +x ca-miner` (Linux/macOS)
            4. Run `./ca-miner --help` to see all options

            ### ðŸ”— Links

            - [Documentation](https://github.com/mitosis-org/ca-miner#readme)
            - [Source Code](https://github.com/mitosis-org/ca-miner)
            - [Issues](https://github.com/mitosis-org/ca-miner/issues)

            ---

            **Full Changelog**: https://github.com/mitosis-org/ca-miner/compare/v0.0.0...${{ github.ref_name || github.event.inputs.tag }}
          draft: false
          prerelease: false

  build:
    name: Build Release Binaries
    needs: create-release
    strategy:
      fail-fast: false
      matrix:
        include:
          - target: x86_64-unknown-linux-gnu
            os: ubuntu-latest
            name: ca-miner-linux-x86_64

          - target: x86_64-unknown-linux-musl
            os: ubuntu-latest
            name: ca-miner-linux-x86_64-musl

          - target: aarch64-unknown-linux-gnu
            os: ubuntu-latest
            name: ca-miner-linux-aarch64

          - target: x86_64-apple-darwin
            os: macos-latest
            name: ca-miner-macos-x86_64

          - target: aarch64-apple-darwin
            os: macos-latest
            name: ca-miner-macos-aarch64

          - target: x86_64-pc-windows-msvc
            os: windows-latest
            name: ca-miner-windows-x86_64.exe

    runs-on: ${{ matrix.os }}
    steps:
      - name: Checkout sources
        uses: actions/checkout@v4

      - name: Install stable toolchain
        uses: actions-rs/toolchain@v1
        with:
          profile: minimal
          toolchain: stable
          override: true
          target: ${{ matrix.target }}

      - name: Install cross-compilation tools (Linux)
        if: matrix.os == 'ubuntu-latest'
        run: |
          sudo apt-get update
          sudo apt-get install -y gcc-multilib
          if [[ "${{ matrix.target }}" == "x86_64-unknown-linux-musl" ]]; then
            sudo apt-get install -y musl-tools
          elif [[ "${{ matrix.target }}" == "aarch64-unknown-linux-gnu" ]]; then
            sudo apt-get install -y gcc-aarch64-linux-gnu
          fi

      - name: Cache cargo registry
        uses: actions/cache@v4
        with:
          path: ~/.cargo/registry
          key: ${{ runner.os }}-${{ matrix.target }}-cargo-registry-${{ hashFiles('**/Cargo.lock') }}

      - name: Cache cargo index
        uses: actions/cache@v4
        with:
          path: ~/.cargo/git
          key: ${{ runner.os }}-${{ matrix.target }}-cargo-index-${{ hashFiles('**/Cargo.lock') }}

      - name: Cache cargo build
        uses: actions/cache@v4
        with:
          path: target
          key: ${{ runner.os }}-${{ matrix.target }}-cargo-build-target-${{ hashFiles('**/Cargo.lock') }}

      - name: Build release binary
        env:
          CARGO_TARGET_AARCH64_UNKNOWN_LINUX_GNU_LINKER: aarch64-linux-gnu-gcc
        run: |
          cargo build --release --target ${{ matrix.target }}

      - name: Strip binary (Linux and macOS)
        if: matrix.os != 'windows-latest'
        run: |
          if [[ "${{ matrix.target }}" == "aarch64-unknown-linux-gnu" ]]; then
            aarch64-linux-gnu-strip target/${{ matrix.target }}/release/ca-miner
          else
            strip target/${{ matrix.target }}/release/ca-miner
          fi

      - name: Create archive (Linux and macOS)
        if: matrix.os != 'windows-latest'
        run: |
          cd target/${{ matrix.target }}/release
          tar czf ../../../${{ matrix.name }}.tar.gz ca-miner
          cd ../../..

      - name: Create archive (Windows)
        if: matrix.os == 'windows-latest'
        run: |
          cd target/${{ matrix.target }}/release
          7z a ../../../${{ matrix.name }}.zip ca-miner.exe
          cd ../../..

      - name: Upload Linux/macOS binary
        if: matrix.os != 'windows-latest'
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ needs.create-release.outputs.upload_url }}
          asset_path: ./${{ matrix.name }}.tar.gz
          asset_name: ${{ matrix.name }}.tar.gz
          asset_content_type: application/gzip

      - name: Upload Windows binary
        if: matrix.os == 'windows-latest'
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ needs.create-release.outputs.upload_url }}
          asset_path: ./${{ matrix.name }}.zip
          asset_name: ${{ matrix.name }}.zip
          asset_content_type: application/zip
